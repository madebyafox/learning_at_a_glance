qplot(nowheel$Age,nowheel$speed.mph)+
geom_smooth(method=speedage_lm)
geom_smooth(method=lm)
qplot(nowheel$Age,nowheel$speed.mph)+geom_smooth(method=speedage_lm)
plot(nowheel$Age,nowheel$speed.mph)+abline(speedage_lm)
qplot(nowheel$Age,nowheel$speed.mph)+geom_smooth(speedage_lm)
qplot(nowheel$Age,nowheel$speed.mph)+theme_bw()+geom_smooth(speedage_lm)
summary(speedage_lm)
anova(speedage_lm)
str(nowheel)
speedage_lm = lm(speed.mph~Age+corral,data=nowheel)
speedage_lm
speedage_lm = lm(speed.mph~Age+as.numeric(corral),data=nowheel)
speedage_lm
plot(nowheel$corral,nowheel$speed.mph)
qplot(nowheel$corral,nowheel$speed.mph)
qplot(nowheel$corral,nowheel$Age)
speedage_lm
plot(speedage_lm)
str(nowheel)
dataM = subset(nowheel,substr(cal1020$Division,1,9) == 'M')
substr(cal1020$Division,1,9)
dataM = subset(nowheel,substr(cal1020$Division,9,9) == 'M')
dataF = subset(nowheel,substr(cal1020$Division,9,9) == 'F')
mlm = lm(speed.mph~Age)
mlm = lm(speed.mph~Age,data=dataM)
mlf = lm(speed.mph~Age,data=dataF)
mlm
mlf
mlm = lm(speed.mph~Age,data=dataM)
mlm = lm(speed.mph~Age,data=dataM)
mlm
summary(mlm)
flm = lm(speed.mph~Age,data=dataF)
summary(flm)
anova(mlm,flm)
summary(mlm)
summary(flm)
install.packages(scatterplot3d)
anova(mlm)
anova(flm)
nowheel$Division
dataM = subset(nowheel,substr(cal1020$Division,9,9) == 'M ')
dataF = subset(nowheel,substr(cal1020$Division,9,9) == 'F ')
mlm = lm(speed.mph~Age,data=dataM)
dataM = subset(nowheel,substr(cal1020$Division,9,10) == 'M ')
dataF = subset(nowheel,substr(cal1020$Division,9,10) == 'F ')
mlm = lm(speed.mph~Age,data=dataM)
flm = lm(speed.mph~Age,data=dataF)
summary(mlm)
summary(flm)
anova(mlm)
anova(flm)
summary(mlm)
summary(flm)
.24/sqrt(1-.24^2)*sqrt(194-2)
tstat = .24/sqrt(1-.24^2)*sqrt(194-2)
1-pt(3.42566,192)
(1-pt(3.42566,192))*2
tstat = (.24/sqrt(1-.24^2))*sqrt(194-2)
(1-pt(tstat,192))*2
(1-pt(tstat,192))*2
load(url("http://vulstats.ucsd.edu/data/admit.data.Rdata"))
load(url("http://vulstats.ucsd.edu/data/fieldgoals.Rdata"))
str(fieldgoals)
glm(success~yardage+week,data=fieldgoals)
load(url("http://vulstats.ucsd.edu/data/crime.data.Rdata"))
str(crime.data)
glm(Count~log(Population) + State,data=crime.data,family=poisson())
read.table(url('http://vulstats.edu/data/bodyfat.data2.txt'))
read.table(url('http://vulstats.edu/data/bodyfat.data2.txt'),header=T,sep="\t")
read.table(url('http://vulstats.ucsd.edu/data/bodyfat.data2.txt'),header=T,sep="\t")
csv = read.table(url('http://vulstats.ucsd.edu/data/bodyfat.data2.txt'),header=T,sep="\t")
csv
csv = read.table(url('http://vulstats.ucsd.edu/data/bodyfat.data2.txt'),header=T,sep="\t")
csv
csv$height
sort(csv$height)
sort(csv$height)[2]
which.max(csv$height)
sort(csv$height)[2]
sort(csv$height)[-2]
sort(csv$height)[length(csv$height)-1]
sort(csv$height)[2]
?mean
winz = function(x){
x[which.max(x)] = sort(x)[length(csv$height)-1]
x[which.min(x)] = sort(x)[2]
}
winz(csv$height)
winz(csv$height)
a = winz(csv$height)
?sample
replicate(1000,winz(sample(csv$height,length(csv$height))))
replicate(1000,winz(sample(csv$height,length(csv$height),T)))
quantile(replicate(1000,winz(sample(csv$height,length(csv$height),T))),c(2.5,97.5)
quantile(replicate(1000,winz(sample(csv$height,length(csv$height),T))),c(2.5,97.5))
quantile(replicate(1000,winz(sample(csv$height,length(csv$height),T))),c(2.5,97.5))
quantile(replicate(1000,winz(sample(csv$height,length(csv$height),T))),c(.25,.975))
quantile(replicate(1000,winz(sample(csv$height,length(csv$height),T))),c(.025,.975))
quantile(x,.1)
qauntile(csv$height,.1)
quantile(csv$height,.1)
winz = function(x){
x[x > quantile(x,1-.1)] = quantile(x,1-.1)
x[x > quantile(x,.1)] = quantile(x,.1)
return mean(x)
}
winz = function(x){
x[x > quantile(x,1-.1)] = quantile(x,1-.1)
x[x > quantile(x,.1)] = quantile(x,.1)
return mean(x)
}
winz = function(x){
x[x > quantile(x,1-.1)] = quantile(x,1-.1)
x[x < quantile(x,.1)] = quantile(x,.1)
return mean(x)
}
winz = function(x){
x[x > quantile(x,1-.1)] = quantile(x,1-.1)
x[x < quantile(x,.1)] = quantile(x,.1)
return mean(x);
}
winz = function(x){
x[x > quantile(x,1-.1)] = quantile(x,1-.1)
x[x < quantile(x,.1)] = quantile(x,.1)
return(mean(x))
}
quantile(replicate(1000,winz(sample(csv$height,length(csv$height),T))),c(.025,.975))
replicate(1000,winz(sample(csv$height,length(csv$height),T)))
csv$height
confint(csv$height)
winzCI
winzCI = quantile(replicate(1000,winz(sample(csv$height,length(csv$height),T))),c(.025,.975))
range(csv$height)
mean(csv$height)
winzCI = quantile(replicate(1000,winz(sample(csv$height,length(csv$height),T))),c(.025,.975))
winzCI = quantile(replicate(1000,winz(sample(csv$height,length(csv$height),T))),c(.05,.95))
winzCI = quantile(replicate(1000,winz(sample(csv$height,length(csv$height),T))),c(.05,.95))
winz = function(x){
q1 = quantile(x,1-.1)
x[x > quantile(x,1-.1)] = q1
q2 = quantile(x,.1)
x[x < quantile(x,.1)]   = q2
return(mean(x))
}
winzCI = quantile(replicate(1000,winz(sample(csv$height,length(csv$height),T))),c(.05,.95))
cornew = function(y,x){
lm1 = lm(y~x)
return(coef(lm1))
}
cornew(csv$height,csv$weight)
test = quantile(replicate(1000,cornew(csv$height,csv$weight),T))),c(.05,.95))
test = quantile(replicate(1000,cornew(csv$height,csv$weight),T),c(.05,.95))
test
b0 = quantile(replicate(1000,cornew(csv$height,csv$weight)[1],T),c(.05,.95))
replicate(1000,cornew(csv$height,csv$weight)[1],T)
csv$height
b0 = quantile(replicate(1000,cornew(sample(csv$height,length(csv$height),
sample(csv$weight,length(csv$weight))[1],T),
c(.05,.95))
cornew = function(y,x){
lm1 = lm(y~x)
return(coef(lm1))
}
b0 = quantile(replicate(1000,cornew(sample(csv$height,length(csv$height),
sample(csv$weight,length(csv$weight))))[1],T),
c(.05,.95))
b0 = quantile(replicate(1000,cornew(sample(csv$height,length(csv$height)),
sample(csv$weight,length(csv$weight)))[1],T),
c(.05,.95))
b1 = quantile(replicate(1000,cornew(sample(csv$height,length(csv$height)),
sample(csv$weight,length(csv$weight)))[2],T),
c(.05,.95))
cor(csv$height,csv$weight)
R = quantile(replicate(1000,cor1(sample(csv$height,length(csv$height)),
sample(csv$weight,length(csv$weight))),T),
c(.025,.975))
cor1 = function(y,x){
return(cor(y,x))
}
R = quantile(replicate(1000,cor1(sample(csv$height,length(csv$height)),
sample(csv$weight,length(csv$weight))),T),
c(.025,.975))
R = quantile(replicate(1000,cor1(sample(csv$height,length(csv$height)),
sample(csv$weight,length(csv$weight))),T),
c(.025,.975))
R = quantile(replicate(1000,cor1(sample(csv$height,length(csv$height)),
sample(csv$weight,length(csv$weight))),T),
c(.025,.975))
cor1 = function(y,x){
return(cor(y,x),method='spearman')
}
R = quantile(replicate(1000,cor1(sample(csv$height,length(csv$height)),
sample(csv$weight,length(csv$weight))),T),
c(.025,.975))
?cor
cor1 = function(y,x){
return(cor(x,y))
}
R = quantile(replicate(1000,cor1(sample(csv$height,length(csv$height)),
sample(csv$weight,length(csv$weight))),T),
c(.025,.975))
cor1 = function(y,x){
return(cor(x,y,method='spearman'))
}
R = quantile(replicate(1000,cor1(sample(csv$height,length(csv$height)),
sample(csv$weight,length(csv$weight))),T),
c(.025,.975))
b0 = quantile(replicate(1000,cornew(rbind(sample(csv$height,length(csv$height)),
sample(csv$weight,length(csv$weight))),T),
c(.05,.95))
R = quantile(replicate(1000,cor1(sample(csv$height,length(csv$height),T),
sample(csv$weight,length(csv$weight),T))),
c(.025,.975))
cor1 = function(x,y){
return(cor(x,y,method='spearman'))
}
R = quantile(replicate(1000,cor1(sample(csv$height,length(csv$height),T),
sample(csv$weight,length(csv$weight),T)),
c(.025,.975))
R = quantile(replicate(1000,cor1(sample(csv$height,length(csv$height),T),
sample(csv$weight,length(csv$weight),T)),
c(.025,.975)))
R = quantile(replicate(1000,cor1(sample(csv$height,length(csv$height),T),
sample(csv$weight,length(csv$weight),T)),
c(.025,.975)))
cor(csv$height,csv$weight)
cor(sample(csv$height,length(csv$height),T),sample(csv$weight,length(csv$weight),T))
R = quantile(replicate(1000,cor1(sample(csv$height,length(csv$height),T),
cor(sample(csv$height,length(csv$height),T),sample(csv$weight,length(csv$weight),T))
cor(sample(csv$height,length(csv$height),T),sample(csv$weight,length(csv$weight),T))
csv = load(url('http://vulstats.ucsd.edu/data/e3.data.Rdata'))
csv
dat$r = residuals(lm(data=csv, x~as.factor(drunk)))
ls
ls()
setwd("C:/Users/me/Google Drive/code/matlab/projects/huey/analysis/data")
setwd("C:/Users/me/Google Drive/classes_meetings/HCI_f2015/Ataglance/CODE/learning_at_a_glance/analysis")
require(ggplot2)
library(plyr)
library('binom')
#library('languageR')
library('lme4')
library('arm')
library('sjPlot') #good package for plotting lmer
library("scales")
# load in all csv files
csvlist = list.files(pattern="*.csv")
for (i in 1:length(csvlist)){
tmp = read.csv(csvlist[i]);
#tmp$subjID = rep(substring(csvlist[i],1,3),times=nrow(tmp)); # add subjid to every row
#tmp = rbind(colorstim,blackstim)
if (i == 1) {
all_data = tmp;
} else {
all_data = rbind(all_data,tmp) # combine csvs into one
}
} #TODO make trial_number useful for analysis
csvlist = list.files(pattern="*learn.csv")
for (i in 1:length(csvlist)){
tmp = read.csv(csvlist[i]);
#tmp$subjID = rep(substring(csvlist[i],1,3),times=nrow(tmp)); # add subjid to every row
#tmp = rbind(colorstim,blackstim)
if (i == 1) {
all_data = tmp;
} else {
all_data = rbind(all_data,tmp) # combine csvs into one
}
} #TODO make trial_number useful for analysis
summary(all_data)
all_data$timestamp
ggplot(data=data_data, aes(x = xmousex, y = ymousey) +
geom_point()
ggplot(data=data_data, aes(x = xmousex, y = ymousey)) + geom_point()
ggplot(data=data_data, aes(x = xmousex, y = ymousey)) + geom_point()
ggplot(data=all_data, aes(x = xmousex, y = ymousey)) + geom_point()
ggplot(data=all_data, aes(x = xmousex, y = ymousey,color=row(xmousex))) + geom_point()
seq.int(1, length(all_data)
seq.int(1, length(all_data))
seq.int(1, length(all_data))
seq.int(1, nrow(all_data))
ggplot(data=all_data, aes(x = xmousex, y = ymousey,color=seq.int(1, nrow(all_data))) + geom_point()
ggplot(data=all_data, aes(x = xmousex, y = ymousey,color=seq.int(1, nrow(all_data)))) + geom_point()
ggplot(data=all_data, aes(x = xmousex, y = ymousey,color=seq.int(1, nrow(all_data)))) + geom_point()
ggplot(data=all_data, aes(x = xmousex, y = ymousey,color=seq.int(1, nrow(all_data))))
+ geom_point() + scale_colour_gradientn(colours = rainbow(5))
ggplot(data=all_data, aes(x = xmousex, y = ymousey,color=seq.int(1, nrow(all_data))))
+ geom_point() + scale_colour_gradientn(colours = rainbow(5))
ggplot(data=all_data, aes(x = xmousex, y = ymousey,color=seq.int(1, nrow(all_data)))) +
geom_point()
ggplot(data=all_data, aes(x = xmousex, y = ymousey,color=seq.int(1, nrow(all_data)))) +
geom_point() + scale_colour_gradientn(colours = rainbow)
ggplot(data=all_data, aes(x = xmousex, y = ymousey,color=seq.int(1, nrow(all_data)))) +
geom_point() + scale_colour_gradientn(colours = rainbow(10))
install.packages("saccades")
library("saccades")
detect.fixations?
??detect.fixations
data.frame('x'=all_data$xmousex)
data.frame('x'=all_data$xmousex,'y'==all_data$xmousex,'time'=seq.int(1, nrow(all_data)))
View(tmp)
fx = data.frame('x'=all_data$xmousex,'y'==all_data$xmousex,'time'=seq.int(1, nrow(all_data)))
fx = data.frame('x'=all_data$xmousex,'y'==all_data$ymousey,'time'=seq.int(1, nrow(all_data)))
fx = data.frame(x=all_data$xmousex,'y'==all_data$ymousey,'time'=seq.int(1, nrow(all_data)))
fx = data.frame(x=all_data$xmousex,y==all_data$ymousey,time=seq.int(1, nrow(all_data)))
fx = data.frame(x=all_data$xmousex,y=all_data$ymousey,time=seq.int(1, nrow(all_data)))
fx = data.frame(x=all_data$xmousex,y=all_data$ymousey,
time=seq.int(1, nrow(all_data)),trial=seq.int(1, nrow(all_data)))
detect.fixations(fx)
just_eyedata = data.frame(x=all_data$xmousex,y=all_data$ymousey,
time=seq.int(1, nrow(all_data)),trial=seq.int(1, nrow(all_data)))
fx = detect.fixations(just_eyedata)
View(fx)
fx = detect.fixations(just_eyedata,lambda = 15)
fx = detect.fixations(just_eyedata,lambda = 15)
fx = detect.fixations(just_eyedata)
fx = detect.fixations(just_eyedata,lambda = 2)
fx = detect.fixations(just_eyedata,lambda = 1)
fx = detect.fixations(just_eyedata,lambda = 5)
fx = detect.fixations(just_eyedata,lambda = 10)
fx = detect.fixations(just_eyedata,lambda = 20)
fx = detect.fixations(just_eyedata,lambda = 200)
fx = detect.fixations(just_eyedata,lambda = 50)
fx = detect.fixations(just_eyedata,lambda = 15,smooth.saccades=F)
View(fx)
View(just_eyedata)
just_eyedata = data.frame(x=all_data$xmousex,y=all_data$ymousey,
time=seq.int(1, nrow(all_data)),trial=rep.int(1, nrow(all_data)))
fx = detect.fixations(just_eyedata,lambda = 2)
View(fx)
fx = detect.fixations(just_eyedata,lambda = 15)
View(fx)
fx = detect.fixations(just_eyedata,lambda = 7)
View(fx)
diagnostic.plot(just_eyedata, fx)
fx = detect.fixations(just_eyedata,lambda = 5)
diagnostic.plot(just_eyedata, fx)
fx = detect.fixations(just_eyedata,lambda = 15)
diagnostic.plot(just_eyedata, fx)
fx = detect.fixations(just_eyedata,lambda = 20)
diagnostic.plot(just_eyedata, fx)
fx = detect.fixations(just_eyedata,lambda = 15)
diagnostic.plot(just_eyedata, fx)
ggplot(data=fx, aes(x = x, y = y,color=dur)) +
geom_point() + scale_colour_gradientn(colours = rainbow(10))
ggplot(data=fx, aes(x = x, y = y,color=dur,size=dur)) +
geom_point() + scale_colour_gradientn(colours = rainbow(10))
ggplot(data=fx, aes(x = x, y = y,color=dur,size=dur+50)) +
geom_point() + scale_colour_gradientn(colours = rainbow(10))
ggplot(data=fx, aes(x = x, y = y,color=dur,size=(dur+50))) +
geom_point() + scale_colour_gradientn(colours = rainbow(10))
ggplot(data=fx, aes(x = x, y = y,color=dur,size=dur)) +
geom_point() + scale_colour_gradientn(colours = rainbow(10))
ggplot(data=fx, aes(x = x, y = y,color=dur,size=dur)) +
geom_point() + scale_colour_gradientn(colours = heat(10))
ggplot(data=fx, aes(x = x, y = y,color=dur,size=dur)) +
geom_point() + scale_colour_gradientn(colours = hot(10))
ggplot(data=fx, aes(x = x, y = y,color=dur,size=dur)) +
geom_point()
ggplot(data=fx, aes(x = x, y = y,color=dur,size=dur)) +
geom_point() + scale_colour_gradientn(colours = heat.colors(10))
ggplot(data=fx, aes(x = x, y = y,color=dur,size=dur)) +
geom_point() + scale_colour_gradientn(colours = reds(10))
ggplot(data=fx, aes(x = x, y = y,color=dur,size=dur)) +
geom_point() + scale_colour_gradientn(colours = Reds(10))
ggplot(data=fx, aes(x = x, y = y,color=dur,size=dur)) +
geom_point() + scale_colour_brewer(colours=Reds())
ggplot(data=fx, aes(x = x, y = y,color=dur,size=dur)) +
geom_point() + scale_colour_brewer()
ggplot(data=fx, aes(x = x, y = y,color=dur,size=dur)) +
geom_point() +
scale_colour_gradientn(colours = colorRampPalette(rev(brewer.pal(11, "Spectral")))(1000))
ggplot(data=fx, aes(x = x, y = y,color=dur,size=dur)) +
geom_point() +
scale_colour_gradientn(colours = rev(heat.colors()))
scale_colour_gradientn(colours = rev(heat.colors(20)))
ggplot(data=fx, aes(x = x, y = y,color=dur,size=dur)) +
geom_point() +
scale_colour_gradientn(colours = rev(heat.colors(20)))
scale_colour_gradientn(colours = rev(rainbow(20)))
ggplot(data=fx, aes(x = x, y = y,color=dur,size=dur)) +
geom_point() +
scale_colour_gradientn(colours = rev(rainbow(20)))
## TODO: ##
# learning effects and split half
# lmer slow on variable slope
# accuracy goes up faster in the color condition
## NOTES ##
#S15 did best in black in 1st and second half. Actually better with black. Lots of eye fatiue/blinking.
require(ggplot2)
library(plyr)
library('binom')
#library('languageR')
library('lme4')
library('arm')
library('sjPlot') #good package for plotting lmer
library("scales")
library("saccades")
data_dir = 'C:\Users\me\Google Drive\classes_meetings\HCI_f2015\Ataglance\CODE\learning_at_a_glance\data'
subjects = c('Colleen', 'Jeremy', 'Riz', 'Tricia', 'Wes')
# load in all csv files
for (s in 1:length(subjects))
csvlist = list.files(pattern=data_dir + "\*learn*")
for (i in 1:length(csvlist)){
tmp = read.csv(csvlist[i]);
#tmp$subjID = rep(substring(csvlist[i],1,3),times=nrow(tmp)); # add subjid to every row
#tmp = rbind(colorstim,blackstim)
if (i == 1) {
all_data = tmp;
} else {
all_data = rbind(all_data,tmp) # combine csvs into one
}
}
}
## TODO: ##
# learning effects and split half
# lmer slow on variable slope
# accuracy goes up faster in the color condition
## NOTES ##
#S15 did best in black in 1st and second half. Actually better with black. Lots of eye fatiue/blinking.
require(ggplot2)
library(plyr)
library('binom')
#library('languageR')
library('lme4')
library('arm')
library('sjPlot') #good package for plotting lmer
library("scales")
library("saccades")
data_dir = 'C:\Users\me\Google Drive\classes_meetings\HCI_f2015\Ataglance\CODE\learning_at_a_glance\data'
subjects = c('Colleen', 'Jeremy', 'Riz', 'Tricia', 'Wes')
# load in all csv files
for (s in 1:length(subjects)){
csvlist = list.files(pattern=data_dir + "\*learn*")
for (i in 1:length(csvlist)){
tmp = read.csv(csvlist[i]);
#tmp$subjID = rep(substring(csvlist[i],1,3),times=nrow(tmp)); # add subjid to every row
#tmp = rbind(colorstim,blackstim)
if (i == 1) {
all_data = tmp;
} else {
all_data = rbind(all_data,tmp) # combine csvs into one
}
}
}
for (s in 1:length(subjects)){
subjects
subjects
subjects
source('C:/Users/me/Google Drive/classes_meetings/HCI_f2015/Ataglance/CODE/learning_at_a_glance/analysis/analysis.R', echo=TRUE)
list.files?
?list.files
source('C:/Users/me/Google Drive/classes_meetings/HCI_f2015/Ataglance/CODE/learning_at_a_glance/analysis/analysis.R', echo=TRUE)
csvlist = list.files(path=file.path(data_dir, subjects[s]),pattern='*learn*')
data_dir = 'C:\Users\me\Google Drive\classes_meetings\HCI_f2015\Ataglance\CODE\learning_at_a_glance\data'
readClipboard()
source('C:/Users/me/Google Drive/classes_meetings/HCI_f2015/Ataglance/CODE/learning_at_a_glance/analysis/analysis.R', echo=TRUE)
source('C:/Users/me/Google Drive/classes_meetings/HCI_f2015/Ataglance/CODE/learning_at_a_glance/analysis/analysis.R', echo=TRUE)
file.path(data_dir, subjects[s])
source('C:/Users/me/Google Drive/classes_meetings/HCI_f2015/Ataglance/CODE/learning_at_a_glance/analysis/analysis.R', echo=TRUE)
paste(data_dir, subjects[s], sep="\\")
source('C:/Users/me/Google Drive/classes_meetings/HCI_f2015/Ataglance/CODE/learning_at_a_glance/analysis/analysis.R', echo=TRUE)
all_data
View(all_data)
source('C:/Users/me/Google Drive/classes_meetings/HCI_f2015/Ataglance/CODE/learning_at_a_glance/analysis/analysis.R', echo=TRUE)
summary(all_data)
just_eyedata = data.frame(x=all_data$xmousex,y=all_data$ymousey,
time=seq.int(1, nrow(all_data)),trial=rep.int(1, nrow(all_data)))
fx = detect.fixations(just_eyedata,lambda = 15)
diagnostic.plot(just_eyedata, fx)
ggplot(data=fx, aes(x = x, y = y,color=dur,size=dur)) +
geom_point() +
scale_colour_gradientn(colours = rev(rainbow(20)))
fx
just_eyedata = data.frame(x=all_data$xmousex,y=all_data$ymousey,
time=seq.int(1, nrow(all_data)),trial=rep.int(1, nrow(all_data)))
View(all_data)
subset(all_data,Fixation=='NA')
subset(all_data,Fixation!='NA')
all_data = subset(all_data,Fixation!='NA')
View(all_data)
all_data = subset(all_data,Fixation =='true')
just_eyedata = data.frame(x=all_data$xmousex,y=all_data$ymousey,
time=seq.int(1, nrow(all_data)),trial=rep.int(1, nrow(all_data)))
fx = detect.fixations(just_eyedata,lambda = 15)
just_eyedata = data.frame(x=all_data$xmousex,y=all_data$ymousey,
time=seq.int(1, nrow(all_data)),trial=rep.int(1, nrow(all_data)))
View(all_data)
View(all_data)
source('C:/Users/me/Google Drive/classes_meetings/HCI_f2015/Ataglance/CODE/learning_at_a_glance/analysis/analysis.R', echo=TRUE)
clear
clc
source('C:/Users/me/Google Drive/classes_meetings/HCI_f2015/Ataglance/CODE/learning_at_a_glance/analysis/analysis.R', echo=TRUE)
source('C:/Users/me/Google Drive/classes_meetings/HCI_f2015/Ataglance/CODE/learning_at_a_glance/analysis/analysis.R', echo=TRUE)
source('C:/Users/me/Google Drive/classes_meetings/HCI_f2015/Ataglance/CODE/learning_at_a_glance/analysis/analysis.R', echo=TRUE)
View(test_data)
answer_data = subset(test_data,isAnswer==1)
View(answer_data)
answer_data = subset(test_data,isAnswer==1 & region >= 0)
answer_data = subset(test_data,isAnswer==1 & region >= 0)
View(answer_data)
answer_data = subset(test_data,isAnswer==1)
answer_data = subset(test_data,isAnswer==1)
View(all_data)
View(answer_data)
sp <- ggplot(data = answer_data, aes(xmousex, ymousey, label=region)) +
geom_point() + geom_text()
ggplot(data = answer_data, aes(xmousex, ymousey, label=region)) +
geom_point() + geom_text()
ggplot(data = answer_data, aes(xmousex, ymousey, label=region)) + geom_point() + geom_text(size=20)
ggplot(data = answer_data, aes(xmousex, ymousey, label=region)) + geom_point() + geom_text(size=10)
